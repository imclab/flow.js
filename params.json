{"name":"Flow.js","body":"# flow.js\r\n## Introduction\r\n\r\nflow.js is a synchron-asynchron flow control library which runs on node and in browsers.\r\nThe functionallity of the library is inspired by node-seq (https://github.com/substack/node-seq) and async (https://github.com/caolan/async). The source is written from scratch.\r\n\r\n## Features\r\n\r\n* sequence flow (seq)\r\n* parallel flow (par) - executes functions in parallel\r\n* parallel flow for each (parEach) - execute one function in parallel for each item inside a given as array or object\r\n* end       - breaks the flow from inside an action\r\n\r\n## Possible features (if somebody like or need)\r\n\r\n* seqEach  - execute sequence for each function given as array\r\n* catch     - adds a catch action, which will handle erros instead of exec action\r\n* autoexec  - automatically execute flow\r\n\r\n## Usage\r\n\r\n### Create a flow and execute\r\n\r\n```javascript\r\n\r\n    flow()\r\n       .exec(function (err, results) {\r\n            if (err) {\r\n                // some error inside the flow\r\n            } else {\r\n                // access to results\r\n            }\r\n       });\r\n```\r\n### Add a sequence\r\n\r\n#### execute synchron method in sequence\r\n\r\n```javascript\r\n    flow()\r\n       .seq(function(){\r\n           // do something synchron\r\n       })\r\n       .exec(function (err, results) {           \r\n       });\r\n\r\n```\r\n\r\n#### execute synchron method in sequence\r\n\r\n```javascript\r\n    flow()\r\n       .seq(function(cb){\r\n           // do something asynchron\r\n           setTimeout(function(){\r\n                // invoke callback\r\n                cb(null, \"result of this sequence\");\r\n           }, 1000);\r\n       })\r\n       .exec(function (err, results) {\r\n       });\r\n\r\n```\r\n\r\n\r\n#### sequence with variable registration\r\n\r\n```javascript\r\n    flow()\r\n       .seq(\"myVar\", function(){\r\n           return \"valueOfMyVar\";\r\n       })\r\n       .exec(function (err, results) {\r\n           console.log(results.myVar);\r\n       });\r\n\r\n```\r\n\r\n### Add parallel control flow\r\n\r\n#### asynchron and synchron control parallel control flows\r\n\r\n```javascript\r\n    flow()\r\n       .par([\r\n            function() {\r\n                // synchron method\r\n            },\r\n            function (cb) {\r\n                // asynchron method\r\n            }\r\n            // and even more\r\n       ])\r\n       .exec(function (err, results) {\r\n       });\r\n\r\n```\r\n\r\n#### asynchron and synchron control parallel with variable registration\r\n\r\n```javascript\r\n    flow()\r\n       .par({\r\n            a: function() {\r\n                // synchron method\r\n                return 123;\r\n            },\r\n            b: function (cb) {\r\n                // asynchron method\r\n                setTimeout(function(){\r\n                    cb(null, \"I completed after 100ms\");\r\n                }, 100);\r\n            }\r\n            // and even more\r\n       })\r\n       .exec(function (err, results) {\r\n            console.log(results);\r\n            // results.a = 123;\r\n            // results.b = \"I completed after 100ms\");\r\n       });\r\n\r\n```\r\n\r\n#### synchron control parallel each without variable registration\r\n\r\n```javascript\r\n    flow()\r\n        .parEach([1, 2, 3], function(value) {\r\n            console.log(value);\r\n        })\r\n        .exec(function (err, results) {\r\n            /*\r\n                output in console could be\r\n                    1      2      3\r\n                    2  or  1  or  2  or ...\r\n                    3      3      1\r\n            */\r\n        })\r\n\r\n```\r\n\r\n#### synchron control parallel each with variable registration\r\n\r\n```javascript\r\n    flow()\r\n        .parEach({\r\n            a: 1,\r\n            b: 2,\r\n            c: 3\r\n        }, function(value) {\r\n            return value*3;\r\n        })\r\n        .exec(function (err, results) {\r\n            console.log(results);   // [3, 6, 9]\r\n        })\r\n\r\n```\r\n\r\n#### asynchron control parallel each with and without variable registration\r\n\r\n```javascript\r\n    flow()\r\n        .parEach([\"do\", \"it\"], function(value, cb) {\r\n            setTimeout(function(){\r\n                console.log(value); // synchron\r\n            }, 10);\r\n        })\r\n        .parEach({\r\n            a: 1,\r\n            b: 2\r\n        }, function(value, cb) {\r\n                    setTimeout(function(){\r\n                        cb(null, value*2);// doubles the value and saves it to a or b\r\n                    }, 10);\r\n                })\r\n        .exec(function (err, results) {\r\n            console.log(results);   // {a: 2, b: 4}\r\n        })\r\n\r\n```\r\n\r\n\r\n### end flow from inside an synchron action\r\n\r\n```javascript\r\n    flow()\r\n        .seq(\"a\", function() {\r\n            // do something\r\n        }\r\n        .par({\r\n            b: function() {\r\n                // do something synchron in parallel ...\r\n\r\n                // end flow on condition\r\n                if (condition) {\r\n                    this.end(); // end flow after return statement\r\n                    return -2;\r\n                }\r\n\r\n                return 2;\r\n            },\r\n            c: function(cb) {\r\n                // ... with something asynchron\r\n\r\n                // end flow the asynchron way\r\n                this.end(null, 3); // or cb.end(null, 3) or cb(null, 3, true) or this(null, 3, true)\r\n            }\r\n        })\r\n        .seq(\"e\", function() {\r\n            // this would executed, because either b or c will end the flow\r\n        }\r\n        .exec(function(err, results) {\r\n            /* this function is called on\r\n               * error thrown in synchron method\r\n               * error object passed in asynchron method\r\n               * this.end() is called\r\n               * flow is executed completely\r\n            */\r\n        });\r\n```\r\n","tagline":"synchron, asynchron control flow javascript library","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}